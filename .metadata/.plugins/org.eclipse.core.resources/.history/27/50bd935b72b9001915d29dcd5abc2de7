#include "main.h"

//*****************************************************************************
// The mutex that protects concurrent access of UART from multiple tasks.
//*****************************************************************************
xSemaphoreHandle g_pUARTSemaphore;

//*****************************************************************************
// The error routine that is called if the driver library encounters an error.
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line){}
#endif

//*****************************************************************************
// This hook is called by FreeRTOS when an stack overflow error is detected.
//*****************************************************************************
void
vApplicationStackOverflowHook(xTaskHandle *pxTask, char *pcTaskName)
{
    // This function can not return, so loop forever.  Interrupts are disabled
    // on entry to this function, so no processor interrupts will interrupt
    // this loop.
    while(1){}
}

//*****************************************************************************
// Configure the UART and its pins.  This must be called before UARTprintf().
//*****************************************************************************
void
ConfigureUART(void)
{
    //
    // Enable the GPIO Peripheral used by the UART.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    //
    // Enable UART0
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);

    //
    // Configure GPIO Pins for UART mode.
    //
    ROM_GPIOPinConfigure(GPIO_PA0_U0RX);
    ROM_GPIOPinConfigure(GPIO_PA1_U0TX);
    ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    //
    // Use the internal 16MHz oscillator as the UART clock source.
    //
    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);

    //
    // Initialize the UART for console I/O.
    //
    UARTStdioConfig(0, 115200, 16000000);
}


//*****************************************************************************
// Configure the ADC and GPIO.  Int and operating global variable.
//*****************************************************************************

void ADCIntHandler(void)
{
    uint32_t ulValue;
    ADCSequenceDataGet(ADC0_BASE, 3, &ulValue); //read from adc
    writeCircBuf (&g_inBuffer, ulValue);
    ADCIntClear(ADC0_BASE, 3);
}

void initADC (void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH9 | ADC_CTL_IE |
                             ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 3);
    ADCIntRegister (ADC0_BASE, 3, ADCIntHandler);
    ADCIntEnable(ADC0_BASE, 3);
}

void YawIntHandler(void)
{
    phase_A = GPIOPinRead(GPIO_PORTB_BASE, GPIO_INT_PIN_0);
    phase_B = GPIOPinRead(GPIO_PORTB_BASE, GPIO_INT_PIN_1);
    if((last_state_A == 0 && last_state_B == 0) && (phase_A == 1 && phase_B == 0)){yaw_count--;}
    else if((last_state_A == 0 && last_state_B == 0) && (phase_A == 0 && phase_B == 1)){yaw_count++;}

    else if((last_state_A == 0 && last_state_B == 1) && (phase_A == 0 && phase_B == 0)){yaw_count--;}
    else if((last_state_A == 0 && last_state_B == 1) && (phase_A == 1 && phase_B == 1)){yaw_count++;}

    else if((last_state_A == 1 && last_state_B == 0) && (phase_A == 0 && phase_B == 0)){yaw_count++;}
    else if((last_state_A == 1 && last_state_B == 0) && (phase_A == 1 && phase_B == 1)){yaw_count--;}

    else if((last_state_A == 1 && last_state_B == 1) && (phase_A == 1 && phase_B == 0)){yaw_count++;}
    else if((last_state_A == 1 && last_state_B == 1) && (phase_A == 0 && phase_B == 1)){yaw_count--;}
    last_state_A = phase_A;
    last_state_B = phase_B;
    GPIOIntClear(GPIO_PORTB_BASE,GPIO_INT_PIN_0 | GPIO_INT_PIN_1);
}

void SWIntHandler(void)
{
    if(sys_init_flag == 0)                                                            // if the system was not initialized
    {
        while(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7) == GPIO_PIN_7){initSwitch();}  // the SW_1 was blocked and the system stops processing
    }
    if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7) == GPIO_PIN_7){SW_on_flag = 1;}       // toggle the state of the switch
    else {SW_on_flag = 0;}
    GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_7);
}

/*
 * Only called once when calibration
 */
void PhaseCIntHandler(void)
{
    phase_C = 1; // Read yaw ref
    yaw_count = 0; // set the reference point to 0
    GPIOIntClear(GPIO_PORTC_BASE, GPIO_INT_PIN_4);
}


void initGPIO(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);

    GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_7);
    GPIOPinTypeGPIOInput(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    GPIOPinTypeGPIOInput(GPIO_PORTC_BASE, GPIO_PIN_4);

    GPIOIntRegister(GPIO_PORTB_BASE, YawIntHandler);
    GPIOIntRegister(GPIO_PORTA_BASE, SWIntHandler);
    GPIOIntRegister(GPIO_PORTC_BASE, PhaseCIntHandler);

    GPIOIntTypeSet(GPIO_PORTB_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_BOTH_EDGES);
    GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_7, GPIO_BOTH_EDGES);
    GPIOIntTypeSet(GPIO_PORTC_BASE, GPIO_PIN_4, GPIO_BOTH_EDGES);

    GPIOIntEnable(GPIO_PORTB_BASE, GPIO_INT_PIN_0 | GPIO_INT_PIN_1);
    GPIOIntEnable(GPIO_PORTA_BASE, GPIO_INT_PIN_7);
    GPIOIntEnable(GPIO_PORTC_BASE, GPIO_INT_PIN_4);
}

//*****************************************************************************
// Initialize FreeRTOS and start the initial set of tasks.
//*****************************************************************************
int main(void)
{
    // Initialize
    initClock();
    // Create a mutex to guard the UART.
    g_pUARTSemaphore = xSemaphoreCreateMutex();

    /* Example Code
    if(LEDTaskInit() != 0){while(1){}}
    if(SwitchTaskInit() != 0){while(1){}}
    */
    if(LEDTaskInit() != 0){while(1){}}

    // Start the scheduler.  This should not return.
    vTaskStartScheduler();

    // In case the scheduler returns for some reason, print an error and loop forever.
    while(1){}
}
